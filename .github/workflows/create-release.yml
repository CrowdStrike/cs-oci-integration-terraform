# This is a basic workflow to help you get started with Actions

name: Generate Resource Manager Template Release

# Controls when the workflow will run
# Triggers the workflow on push or pull request events but only for the "main" branch
on:
  push:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "create-release"
  create-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Step 2: Get version from templates
      - name: Get version from templates
        id: get_version
        run: |
          echo "Searching for template_version in outputs.tf..."
          grep_result=$(grep -E 'output "template_version"' -A2 templates/Resource_Manager_Template/outputs.tf)
          echo "Grep result:"
          echo "$grep_result"
          version=$(echo "$grep_result" | grep 'value' | sed -E 's/.*"(v[0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          echo "Extracted version: $version"
          if [ -z "$version" ]; then
            echo "Error: template_version not found in outputs.tf" >&2
            exit 1
          fi
          echo "VERSION=$version" >> $GITHUB_ENV

      # Step 3: Create a ZIP for the Resource Manager Template Directory
      - name: Create Resource_Manager_Template Zip
        run: |
          mkdir -p artifacts
          cd templates/Resource_Manager_Template
          zip -r ../../artifacts/Resource_Manager_Template-${{ env.VERSION }}.zip .
          cd ../..

      # Step 4: Create a GitHub Release
      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{env.VERSION}}
          body: | 
            This release contains the terraform configuration for version ${{ env.VERSION }}.
            **Assets:**
            - `Resource_Manager_Template-${{ env.VERSION }}.zip` - Version-specific template for auditing
            - `Resource_Manager_Template-latest.zip` - Static template URL (always points to latest)
          draft: false
          prerelease: false

      # Step 5: Upload the versioned ZIP file
      - name: Upload the versioned ZIP file
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.create-release.outputs.upload_url }}
            asset_path: artifacts/Resource_Manager_Template-${{ env.VERSION }}.zip
            asset_name: Resource_Manager_Template-${{ env.VERSION }}.zip
            asset_content_type: application/zip

      # Step 6: Create a static ZIP for the Resource Manager Template Directory
      - name: Create Resource_Manager_Template Static Zip
        run: |
          cd templates/Resource_Manager_Template
          zip -r ../../artifacts/Resource_Manager_Template-latest.zip .
          cd ../..
          # Verify the file was created
          if [ -f "artifacts/Resource_Manager_Template-latest.zip" ]; then
            echo "‚úÖ Static ZIP created successfully"
            ls -la artifacts/Resource_Manager_Template-latest.zip
          else
            echo "‚ùå Failed to create static ZIP"
            exit 1
          fi

      # Step 7: Delete existing static ZIP (Resource_Manager_Template-latest.zip) file from previous releases
      - name: Delete previous static asset from all releases
        continue-on-error: true
        run: |
          echo "Searching for existing static assets to remove..."
          
          # Get all releases with error handling
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100") || {
            echo "‚ùå Failed to fetch releases"
            exit 1
          }
          
          # Validate that we got valid JSON
          if ! echo "$RELEASES" | jq empty 2>/dev/null; then
            echo "‚ùå Invalid JSON response from GitHub API"
            exit 1
          fi
          
          # Find and delete Resource_Manager_Template-latest.zip from all releases
          echo "$RELEASES" | jq -r '.[] | select(.assets != null) | .assets[] | select(.name=="Resource_Manager_Template-latest.zip") | .id' | while read -r asset_id; do
            [ -n "$asset_id" ] && {
              echo "Deleting asset ID: $asset_id"
              curl -X DELETE -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" || {
                echo "‚ùå Failed to delete asset $asset_id"
                exit 1
              }
              echo "‚úÖ Successfully deleted asset $asset_id"
            }
          done
          
          echo "‚úÖ Cleanup completed"
          
      # Step 8: Upload new static ZIP to current release
      - name: Upload the static ZIP file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/Resource_Manager_Template-latest.zip
          asset_name: Resource_Manager_Template-latest.zip
          asset_content_type: application/zip

      # Step 9: Verify static ZIP upload and test URL
      - name: Verify static ZIP upload
        run: |
          echo "‚úÖ Successfully uploaded both assets:"
          echo "   üìã Resource_Manager_Template-${{ env.VERSION }}.zip (for auditing)"
          echo "   üîó Resource_Manager_Template-latest.zip (static URL)"
          echo ""
          
          STATIC_URL="https://github.com/${{ github.repository }}/releases/latest/download/Resource_Manager_Template-latest.zip"
          echo "Static URL: $STATIC_URL"
          
          # Test that the static URL is accessible (returns 200 or 302)
          echo "Testing static URL accessibility..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -I "$STATIC_URL" 2>/dev/null)
          
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "302" ]; then
            echo "‚úÖ Static URL is accessible (HTTP $HTTP_STATUS)"
          else
            echo "‚ö†Ô∏è Static URL returned HTTP $HTTP_STATUS - may need time to propagate"
            # Don't fail the workflow for this, as it might just need time
          fi








